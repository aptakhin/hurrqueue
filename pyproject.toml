[tool.poetry]
name = "snailqueue"
version = "0.1.0"
description = ""
authors = ["Alexander Ptakhin <me@aptakhin.name>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
pydantic = "^2.6.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.2.0"
pytest = ">=7.0,<8.0"
pytest-asyncio = "^0.23.4"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
pytest-watcher = "^0.3.5"
pytest-benchmark = "^4.0.0"

[tool.poetry.group.sqlalchemy.dependencies]
sqlalchemy = "^2.0.25"
asyncpg = "^0.29.0"

[tool.poetry.group.python-statemachine.dependencies]
python-statemachine = "^2.1.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]

line-length = 79
indent-width = 4

preview = true

target-version = "py39"

[tool.ruff.lint]
# ruff linter --output-format json | jq ".[].prefix" | sort
select = [
    "A",
    "AIR",
    "ANN",
    "ARG",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "C90",
    "COM",
    # "CPY",
    # "D",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "F",
    "FA",
    "FBT",
    "FIX",
    "FLY",
    "FURB",
    "G",
    "I",
    "ICN",
    # "INP",
    "INT",
    "ISC",
    "LOG",
    "N",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PL",
    "PT",
    # "PTH",
    "PYI",
    # "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "SLOT",
    "T10",
    "T20",
    "TCH",
    "TD",
    "TID",
    "TRIO",
    "TRY",
    # "UP",
    "YTT",
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"**/test_*.py" = ["S101"]  # S101 Use of `assert` detected

[tool.mypy]
ignore_missing_imports = true
# warn_unused_configs = true
# check_untyped_defs = true
# explicit_package_bases = true
# warn_unreachable = true
# warn_redundant_casts = true

[tool.pytest.ini_options]
markers = [
    "slow: slow tests not for TDD",
    "require_db: marks tests as require database",
    "benchmark: marks benchmark tests"
]
asyncio_mode = "auto"
